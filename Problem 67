You have been given below code snippet.
 lines = sc.parallelize(['Its fun to have fun,','but you have to know how.'])
 M = lines.map( lambda x: x.replace(',7 ').replace('.',' 'J.replaceC-V ').lower()) 
 r2 = r1.flatMap(lambda x: x.split())
r3 = r2.map(lambda x: (x, 1))
operation1
r5 = r4.map(lambda x:(x[1],x[0]))
r6 = r5.sortByKey(ascending=False) r6.take(20)
Write a correct code snippet for operationl which will produce desired output, shown below. 
[(2, 'fun'), (2, 'to'), (2, 'have'), (1, its'), (1, 'know1), (1, 'how1), (1, 'you'), (1, 'but')]



lines = sc.parallelize(['Its fun to have fun,','but you have to know how.']) \
        .map( lambda x: x.replace(',',' ').replace('.',' ').lower()) \
        .flatMap(lambda x: x.split()) \
        .map(lambda x: (x, 1)) \
        .reduceByKey(lambda x,y:x+y) \
        .map(lambda x:(x[1],x[0])) \
        .sortByKey(False)


[(2, 'to'), (2, 'fun'), (2, 'have'), (1, 'you'), (1, 'but'), (1, 'its'), (1, 'know'), (1, 'how')]
